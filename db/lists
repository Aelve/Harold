- name: head
  complexity: O(1)
  code: |
      head :: [a] -> a
      head (x:_) = x
      head _     = error "Prelude.head: empty list"

- name: tail
  complexity: O(1)
  code: |
      tail :: [a] -> [a]
      tail (_:xs) = xs
      tail _      = error "Prelude.tail: empty list"

- name: last
  complexity: O(n)
  code: |
      last :: [a] -> a
      last [x]    = x
      last (_:xs) = last xs
      last []     = error "Prelude.last: empty list"

- name: init
  complexity: O(n)
  code: |
      init :: [a] -> [a]
      init [x]    = []
      init (x:xs) = x : init xs
      init []     = error "Prelude.init: empty list"

- name: map
  code: |
      map :: (a -> b) -> [a] -> [b]
      map _ []     = []
      map f (x:xs) = f x : map f xs

- name: (++)
  complexity: O(n), where n is length of 1st argument
  code: |
      (++) :: [a] -> [a] -> [a]
      (++) []     ys = ys
      (++) (x:xs) ys = x : xs ++ ys

- name: filter
  code: |
      filter :: (a -> Bool) -> [a] -> [a]
      filter _ []     = []
      filter p (x:xs)
        | p x         = x : filter p xs
        | otherwise   = filter p xs

- name: "null"              # Without quotes it's an actual 'null' value.
  complexity: O(1)
  code: |
      null :: [a] -> Bool
      null [] = True
      null _  = False

- name: length
  complexity: O(n)
  code: |
      length :: [a] -> Int
      length []     = 0
      length (_:xs) = 1 + length xs

- name: (!!)
  complexity: O(index)
  code: |
      (!!) :: [a] -> Int -> a
      xs     !! n | n < 0 = error "Prelude.!!: negative index"
      []     !! _         = error "Prelude.!!: index too large"
      (x:_)  !! 0         = x
      (_:xs) !! n         = xs !! (n-1)

- name: reverse
  complexity: O(n)
  code: |
      reverse :: [a] -> [a]
      reverse = foldl (flip (:)) []
