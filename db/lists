- name: head
  location:
    - modules: [Prelude, Data.List]
  complexity: O(1)
  implementations:
    - name: report
      type: "[a] -> a"
      code: |
        head (x:_) = x
        head []    = error "Prelude.head: empty list"

######################################################################

- name: tail
  location:
    - modules: [Prelude, Data.List]
  complexity: O(1)
  implementations:
    - name: report
      type: "[a] -> [a]"
      code: |
        tail (_:xs) = xs
        tail []     = error "Prelude.tail: empty list"

######################################################################

- name: last
  location:
    - modules: [Prelude, Data.List]
  complexity: O(n)
  implementations:
    - name: report
      type: "[a] -> a"
      code: |
        last [x]    = x
        last (_:xs) = last xs
        last []     = error "Prelude.last: empty list"

######################################################################

- name: init
  location:
    - modules: [Prelude, Data.List]
  complexity: O(n)
  implementations:
    - name: report
      type: "[a] -> [a]"
      code: |
        init [x]    = []
        init (x:xs) = x : init xs
        init []     = error "Prelude.init: empty list"

######################################################################

- name: map
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> b) -> [a] -> [b]"
      code: |
        map f []     = []
        map f (x:xs) = f x : map f xs

######################################################################

- name: (++)
  location:
    - modules: [Prelude, Data.List]
  complexity: O(n), where n is length of 1st argument
  implementations:
    - name: report
      type: "[a] -> [a] -> [a]"
      code: |
        []     ++ ys = ys
        (x:xs) ++ ys = x : (xs ++ ys)

######################################################################

- name: filter
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> Bool) -> [a] -> [a]"
      code: |
        filter p []                 = []
        filter p (x:xs) | p x       = x : filter p xs
                        | otherwise = filter p xs

######################################################################

- name: "null"           # Without quotes it's an actual 'null' value.
  location:
    - modules: [Prelude, Data.List]
  complexity: O(1)
  implementations:
    - name: report
      type: "[a] -> Bool"
      code: |
        null []    = True
        null (_:_) = False

######################################################################

- name: length
  location:
    - modules: [Prelude, Data.List]
  complexity: O(n)
  implementations:
    - name: report
      type: "[a] -> Int"
      code: |
        length []     = 0
        length (_:xs) = 1 + length xs

######################################################################

- name: (!!)
  location:
    - modules: [Prelude, Data.List]
  complexity: O(index)
  implementations:
    - name: report
      type: "[a] -> Int -> a"
      code: |
        xs     !! n | n < 0 = error "Prelude.!!: negative index"
        []     !! _         = error "Prelude.!!: index too large"
        (x:_)  !! 0         = x
        (_:xs) !! n         = xs !! (n-1)

######################################################################

- name: reverse
  location:
    - modules: [Prelude, Data.List]
  complexity: O(n)
  implementations:
    - name: report
      type: "[a] -> [a]"
      code: |
        reverse = foldl (flip (:)) []
    - name: naive
      type: "[a] -> [a]"
      complexity: O(nÂ²)
      code: |
        reverse []     = []
        reverse (x:xs) = reverse xs ++ [x]
    - name: with accumulator
      type: "[a] -> [a]"
      code: |
        reverse s = rev s []
          where
            rev []     acc = acc
            rev (x:xs) acc = rev xs (x:acc)

######################################################################

- name: concat
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "[[a]] -> [a]"
      code: |
        concat xss = foldr (++) [] xss

######################################################################

- name: concatMap
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> [b]) -> [a] -> [b]"
      code: |
        concatMap f = concat . map f

######################################################################

- name: foldl
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> b -> a) -> a -> [b] -> a"
      code: |
        foldl f z []     = z
        foldl f z (x:xs) = foldl f (f z x) xs

######################################################################

- name: foldl1
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> a -> a) -> [a] -> a"
      code: |
        foldl1 f (x:xs) = foldl f x xs
        foldl1 _ []     = error "Prelude.foldl1: empty list"

######################################################################

- name: scanl
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> b -> a) -> a -> [b] -> [a]"
      code: |
        scanl f q xs = q : (case xs of
                              []   -> []
                              x:xs -> scanl f (f q x) xs)

######################################################################

- name: scanl1
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> a -> a) -> [a] -> [a]"
      code: |
        scanl1 f (x:xs) = scanl f x xs
        scanl1 _ []     = []

######################################################################

- name: foldr
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> b -> b) -> b -> [a] -> b"
      code: |
        foldr f z []     = z
        foldr f z (x:xs) = f x (foldr f z xs)

######################################################################

- name: foldr1
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> a -> a) -> [a] -> a"
      code: |
        foldr1 f [x]     =  x
        foldr1 f (x:xs)  =  f x (foldr1 f xs)
        foldr1 _ []      =  error "Prelude.foldr1: empty list"

######################################################################

- name: scanr
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> b -> b) -> b -> [a] -> [b]"
      code: |
        scanr f q0 []     = [q0]
        scanr f q0 (x:xs) = f x q : qs
          where
            qs@(q:_) = scanr f q0 xs

######################################################################

- name: scanr1
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> a -> a) -> [a] -> [a]"
      code: |
        scanr1 f []     = []
        scanr1 f [x]    = [x]
        scanr1 f (x:xs) = f x q : qs
          where
            qs@(q:_) = scanr1 f xs

######################################################################

- name: iterate
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> a) -> a -> [a]"
      code: |
        iterate f x = x : iterate f (f x)

######################################################################

- name: repeat
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "a -> [a]"
      code: |
        repeat x = xs where xs = x:xs

######################################################################

- name: replicate
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "Int -> a -> [a]"
      code: |
        replicate n x = take n (repeat x)

######################################################################

- name: cycle
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "[a] -> [a]"
      code: |
        cycle [] = error "Prelude.cycle: empty list"
        cycle xs = xs' where xs' = xs ++ xs'

######################################################################

- name: take
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "Int -> [a] -> [a]"
      code: |
        take n _      | n <= 0 = []
        take _ []              = []
        take n (x:xs)          = x : take (n-1) xs

######################################################################

- name: drop
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "Int -> [a] -> [a]"
      code: |
        drop n xs     | n <= 0 = xs
        drop _ []              = []
        drop n (_:xs)          = drop (n-1) xs

######################################################################

- name: splitAt
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "Int -> [a] -> ([a], [a])"
      code: |
        splitAt n xs = (take n xs, drop n xs)

######################################################################

- name: takeWhile
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> Bool) -> [a] -> [a]"
      code: |
        takeWhile p []     = []
        takeWhile p (x:xs)
          | p x            = x : takeWhile p xs
          | otherwise      = []

######################################################################

- name: dropWhile
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> Bool) -> [a] -> [a]"
      code: |
        dropWhile p []         = []
        dropWhile p xs@(x:xs')
          | p x                = dropWhile p xs'
          | otherwise          = xs

######################################################################

- name: span
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> Bool) -> [a] -> ([a], [a])"
      code: |
        span p []         = ([], [])
        span p xs@(x:xs')
          | p x           = (x:ys, zs)
          | otherwise     = ([], xs)
          where
            (ys, zs) = span p xs'

######################################################################

- name: break
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> Bool) -> [a] -> ([a], [a])"
      code: |
        break p = span (not . p)

######################################################################

- name: lines
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "String -> [String]"
      code: |
        lines "" = []
        lines s  = let (l, s') = break (== '\n') s
                   in  l : case s' of
                             []      -> []
                             (_:s'') -> lines s''

######################################################################

- name: words
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "String -> [String]"
      code: |
        words s = case dropWhile isSpace s of
          "" -> []
          s' -> w : words s''
                where (w, s'') = break isSpace s'

######################################################################

- name: unlines
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "[String] -> String"
      code: |
        unlines = concatMap (++ "\n")

######################################################################

- name: unwords
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "[String] -> String"
      code: |
        unwords [] = ""
        unwords ws = foldr1 (\w s -> w ++ ' ':s) ws

######################################################################

- name: and
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "[Bool] -> Bool"
      code: |
        and = foldr (&&) True

######################################################################

- name: or
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "[Bool] -> Bool"
      code: |
        or = foldr (||) False

######################################################################

- name: any
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> Bool) -> [a] -> Bool"
      code: |
        any p = or . map p

######################################################################

- name: all
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> Bool) -> [a] -> Bool"
      code: |
        all p = and . map p

######################################################################

- name: elem
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(Eq a) => a -> [a] -> Bool"
      code: |
        elem x = any (== x)

######################################################################

- name: notElem
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(Eq a) => a -> [a] -> Bool"
      code: |
        notElem x = all (/= x)

######################################################################

- name: lookup
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(Eq a) => a -> [(a, b)] -> Maybe b"
      code: |
        lookup key []          = Nothing
        lookup key ((x,y):xys)
          | key == x           = Just y
          | otherwise          = lookup key xys

######################################################################

- name: sum
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(Num a) => [a] -> a"
      code: |
        sum = foldl (+) 0

######################################################################

- name: product
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(Num a) => [a] -> a"
      code: |
        product = foldl (*) 1

######################################################################

- name: maximum
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(Ord a) => [a] -> a"
      code: |
        maximum [] = error "Prelude.maximum: empty list"
        maximum xs = foldl1 max xs

######################################################################

- name: minimum
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(Ord a) => [a] -> a"
      code: |
        minimum [] = error "Prelude.minimum: empty list"
        minimum xs = foldl1 min xs

######################################################################

- name: zip
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "[a] -> [b] -> [(a, b)]"
      code: |
        zip = zipWith (,)

######################################################################

- name: zip3
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "[a] -> [b] -> [c] -> [(a, b, c)]"
      code: |
        zip3 = zipWith3 (,,)

######################################################################

- name: zipWith
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> b -> c) -> [a] -> [b] -> [c]"
      code: |
        zipWith z (a:as) (b:bs) = z a b : zipWith z as bs
        zipWith _ _ _ = []

######################################################################

- name: zipWith3
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "(a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]"
      code: |
        zipWith3 z (a:as) (b:bs) (c:cs) = z a b c : zipWith3 z as bs cs
        zipWith3 _ _ _ _ = []

######################################################################

- name: unzip
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "[(a, b)] -> ([a], [b])"
      code: |
        unzip = foldr (\(a,b) ~(as,bs) -> (a:as,b:bs)) ([],[])

######################################################################

- name: unzip3
  location:
    - modules: [Prelude, Data.List]
  implementations:
    - name: report
      type: "[(a, b, c)] -> ([a], [b], [c])"
      code: |
        unzip3 = foldr (\(a,b,c) ~(as,bs,cs) -> (a:as,b:bs,c:cs))
                       ([],[],[])
