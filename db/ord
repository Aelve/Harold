- name: class Ord
  location:
    - modules: [Prelude, Data.Ord]
  implementations:
    - name: report
      type: "Eq a => Ord a"
      methods:
        - name: compare
          type: "a -> a -> Ordering"
        - name: (<)
          type: "a -> a -> Bool"
        - name: (<=)
          type: "a -> a -> Bool"
        - name: (>=)
          type: "a -> a -> Bool"
        - name: (>)
          type: "a -> a -> Bool"
        - name: max
          type: "a -> a -> a"
        - name: min
          type: "a -> a -> a"

######################################################################

- name: compare
  location:
    - modules: [Prelude, Data.Ord]
  implementations:
    - name: report
      type: "(Ord a) => a -> a -> Ordering"
      class: Ord
      code: |
        compare x y
          | x == y    = EQ
          | x <= y    = LT
          | otherwise = GT

######################################################################

- name: (<=)
  location:
    - modules: [Prelude, Data.Ord]
  implementations:
    - name: report
      type: "(Ord a) => a -> a -> Bool"
      class: Ord
      code: |
        x <= y = compare x y /= GT

######################################################################

- name: (<)
  location:
    - modules: [Prelude, Data.Ord]
  implementations:
    - name: report
      type: "(Ord a) => a -> a -> Bool"
      class: Ord
      code: |
        x < y = compare x y == LT

######################################################################

- name: (>=)
  location:
    - modules: [Prelude, Data.Ord]
  implementations:
    - name: report
      type: "(Ord a) => a -> a -> Bool"
      class: Ord
      code: |
        x >= y = compare x y /= LT

######################################################################

- name: (>)
  location:
    - modules: [Prelude, Data.Ord]
  implementations:
    - name: report
      type: "(Ord a) => a -> a -> Bool"
      class: Ord
      code: |
        x > y = compare x y == GT

######################################################################

- name: max
  location:
    - modules: [Prelude, Data.Ord]
  implementations:
    - name: report
      type: "(Ord a) => a -> a -> a"
      class: Ord
      code: |
        max x y
          | x <= y    = y
          | otherwise = x

######################################################################

- name: min
  location:
    - modules: [Prelude, Data.Ord]
  implementations:
    - name: report
      type: "(Ord a) => a -> a -> a"
      class: Ord
      code: |
        min x y
          | x <= y    = x
          | otherwise = y
