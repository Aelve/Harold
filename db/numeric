- name: subtract
  location:
    - modules: [Prelude]
  implementations:
    - name: report
      type: "(Num a) => a -> a -> a"
      code: |
        subtract = flip (-)

######################################################################

- name: even
  location:
    - modules: [Prelude]
  implementations:
    - name: report
      type: "(Integral a) => a -> Bool"
      code: |
        even n = n `rem` 2 == 0

######################################################################

- name: odd
  location:
    - modules: [Prelude]
  implementations:
    - name: report
      type: "(Integral a) => a -> Bool"
      code: |
        odd = not . even

######################################################################

- name: gcd
  location:
    - modules: [Prelude]
  implementations:
    - name: report
      type: "(Integral a) => a -> a -> a"
      code: |
        gcd 0 0 = error "Prelude.gcd: gcd 0 0 is undefined"
        gcd x y = gcd' (abs x) (abs y)
          where
            gcd' x 0 = x
            gcd' x y = gcd' y (x `rem` y)

######################################################################

- name: lcm
  location:
    - modules: [Prelude]
  implementations:
    - name: report
      type: "(Integral a) => a -> a -> a"
      code: |
        lcm _ 0 = 0
        lcm 0 _ = 0
        lcm x y = abs ((x `quot` (gcd x y)) * y)

######################################################################

- name: (^)
  location:
    - modules: [Prelude]
  implementations:
    - name: report
      type: "(Num a, Integral b) => a -> b -> a"
      code: |
        x ^ 0         = 1
        x ^ n | n > 0 = f x (n-1) x
          where
            f _ 0 y = y
            f x n y = g x n  where
                      g x n | even n    = g (x*x) (n `quot` 2)
                            | otherwise = f x (n-1) (x*y)
        _ ^ _         = error "Prelude.^: negative exponent"

######################################################################

- name: (^^)
  location:
    - modules: [Prelude]
  implementations:
    - name: report
      type: "(Fractional a, Integral b) => a -> b -> a"
      code: |
        x ^^ n = if n >= 0 then x^n else recip (x^(-n))

######################################################################

- name: fromIntegral
  location:
    - modules: [Prelude]
  implementations:
    - name: report
      type: "(Integral a, Num b) => a -> b"
      code: |
        fromIntegral = fromInteger . toInteger

######################################################################

- name: realToFrac
  location:
    - modules: [Prelude]
  implementations:
    - name: report
      type: "(Real a, Fractional b) => a -> b"
      code: |
        realToFrac = fromRational . toRational
